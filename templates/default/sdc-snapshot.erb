#!/bin/bash
#
# This script will delete all oldest snapshots except $RETENTION_COUNT most recent.
# It will not create new snapshots if there is less than $MIN_FREE_GB Mb left on /
# because snapshots take up disk space.
#
# $MIN_FREE_GB and $RETENTION_COUNT can be overridden before running the script, ie:
# MIN_FREE_GB=750 RETENTION_COUNT=20 ./sdc-snapshot
#

set -e

export SSH_AUTH_SOCK=/dev/null
export SDC_ACCOUNT="<%= node['sdc']['account_name'] %>"
export SDC_URL="<%= node['sdc']['api_endpoint'] %>"
export SDC_KEY_ID=`ssh-keygen -l -f $HOME/.ssh/sdc-snapshot.pub | awk '{print $2}' | tr -d '\n'`

RETENTION_COUNT=${RETENTION_COUNT:-10}
MIN_FREE_GB=${MIN_FREE_GB:-750}
MACHINE=`zonename`

## functions
say () {
  echo "[`date`] $1"
}

create_snapshot () {
  SNAPSHOT_NAME=$(date +"%Y%m%d-%H%M%S%Z")
  echo -n "[`date`] creating snapshot "
  sdc-createmachinesnapshot --keyId "$SDC_KEY_ID" --machine $MACHINE --name $SNAPSHOT_NAME | grep name | awk 'BEGIN{FS="\""}{print $4}'
}

oldest_snapshots () {
  say "looking for old snapshots..."
  OLDEST_SNAPSHOTS=`sdc-listmachinesnapshots --keyId "$SDC_KEY_ID" $MACHINE | grep -B 1 "\"state\": \"created\"" | grep "\name\"" | tac | tail +$RETENTION_COUNT | awk 'BEGIN{FS="\""}{print $4}'`
}

delete_oldest_snapshots () {
  oldest_snapshots
  for snapshot in $OLDEST_SNAPSHOTS; do
    say "deleting old snapshot $snapshot..."
    sdc-deletemachinesnapshot --debug --keyId "$SDC_KEY_ID" --snapshot "$snapshot" $MACHINE
  done
}

check_free_space () {
  set -o pipefail
  FREE=`df -m / | tail -1| awk '{print $4}'`
  set +o pipefail
  if [ $FREE -lt $((MIN_FREE_GB * 1024)) ]; then
    say "not enough free space left for snapshots, giving up! Need ${MIN_FREE_GB}Gb, have $((FREE / 1024))Gb"
    exit 1
  fi
}

say "snapshotting starting"

delete_oldest_snapshots
check_free_space
create_snapshot

say "snapshotting finished"
